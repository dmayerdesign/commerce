import { existsSync, writeFileSync } from 'fs'
import { mkdirpSync } from 'fs-extra'
import { singularize } from 'inflection'
import { kebabCase, upperFirst } from 'lodash'
import { resolve } from 'path'
import * as apiEndpoints from '../lib/constants/api-endpoints'
import { endpointsBlacklist } from './endpoints-blacklist'

async function main(): Promise<void> {
  const baseImportsForModule = `// THIS FILE IS GENERATED. Do not edit this file.
import { Module } from '@nestjs/common'
import { TypeOrmModule } from '@nestjs/typeorm'
`
  const baseImportsForController1 = `// THIS FILE IS GENERATED. Do not edit this file.
import { Controller, Inject } from '@nestjs/common'\n`
  const baseImportsForController2 = `import { QbController } from '../../shared/controller/controller'\n`
  const pathToServerSrc = '../../../server/src'
  const pathToDomains = `${pathToServerSrc}/domains`
  let barrelImports = ``
  let barrelBody = `export const domainModules = [`

  Object.keys(apiEndpoints)
    .filter((endpointName) => endpointsBlacklist.indexOf(endpointName) === -1)
    .sort((a, b) => kebabCase(singularize(a)) < kebabCase(singularize(b)) ? -1 : 1)
    .forEach((endpointName) => {
      const entityName = upperFirst(singularize(endpointName))
      const entityNameKebab = kebabCase(singularize(endpointName))
      const hasCustomController = existsSync(
        resolve(__dirname, `${pathToDomains}/${entityNameKebab}/${entityNameKebab}.controller.ts`),
      )

      let entityImportsForController1 =
`import { ${entityName} } from '@qb/common/api/entities/${entityNameKebab}'\n`
      if (!hasCustomController) {
        entityImportsForController1 +=
`import { ${endpointName} } from '@qb/common/constants/api-endpoints'\n`
      }
      const entityImportsForController2 =
`import { ${entityName}Repository } from './${entityNameKebab}.repository.generated'\n`
      let bodyForController = '\n'
      let customBaseImportsForController1 = ''

      if (!hasCustomController) {
        bodyForController += `@Controller(${endpointName})\n`
      } else {
        customBaseImportsForController1 = `// THIS FILE IS GENERATED. Do not edit this file.
import { Inject } from '@nestjs/common'\n`
      }
      bodyForController +=
`export class ${entityName}Controller extends QbController<${entityName}> {
  constructor(
    @Inject(${entityName}Repository)
    protected readonly _repository: ${entityName}Repository
  ) { super() }
}
`

      let entityImportsForModule =
`import { ${entityName} } from '@qb/common/api/entities/${entityNameKebab}'`
      if (hasCustomController) {
        entityImportsForModule += `
import { ${entityName}Controller } from './${entityNameKebab}.controller'`
      } else {
        entityImportsForModule += `
import { ${entityName}Controller } from './${entityNameKebab}.controller.generated'`
      }
      const bodyForModule = `
@Module({
  imports: [ TypeOrmModule.forFeature([ ${entityName} ]) ],
  controllers: [ ${entityName}Controller ],
})
export class ${entityName}Module { }
`

      barrelImports += `import { ${entityName}Module } from './domains/${entityNameKebab}/${entityNameKebab}.module.generated'\n`
      barrelBody += `
  ${entityName}Module,`

      mkdirpSync(resolve(__dirname, `${pathToDomains}/${entityNameKebab}`))
      writeFileSync(
        resolve(__dirname, `${pathToDomains}/${entityNameKebab}/${entityNameKebab}.module.generated.ts`),
        baseImportsForModule + entityImportsForModule + bodyForModule
      )
      writeFileSync(
        resolve(__dirname, `${pathToDomains}/${entityNameKebab}/${entityNameKebab}.controller.generated.ts`),
        (customBaseImportsForController1 || baseImportsForController1) +
        entityImportsForController1 +
        baseImportsForController2 +
        entityImportsForController2 +
        bodyForController
      )
    })

    barrelBody += `
]\n`
    writeFileSync(
      resolve(__dirname, `${pathToServerSrc}/domain-modules.generated.ts`),
      barrelImports + '\n' + barrelBody
    )
}
main()
