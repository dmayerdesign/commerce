import { writeFileSync } from 'fs'
import { camelCase, snakeCase, upperFirst } from 'lodash'
import { resolve } from 'path'
import * as recursiveReaddir from 'recursive-readdir'

async function main(): Promise<void> {
  const entitiesPath = resolve(__dirname, '../lib/api/entities')
  const destPath = resolve(__dirname, '../lib/config/mongoose-module-config.generated.ts')
  const allPaths = await recursiveReaddir(entitiesPath)
  const getFileNameSansExt = (filePath: string): string => filePath.substring(entitiesPath.length + 1, filePath.length - 3)
  const allFileNames = allPaths
    .filter((filePath) => !!filePath.match(/[^(index)]\.ts$/))
    .map((filePath) => getFileNameSansExt(filePath))
    .sort((a, b) => a < b ? -1 : 1)

  let file = `// THIS FILE IS GENERATED. Do not edit this file.
`
  let imports = ''
  let beforeExports = ''
  let exportsArr = ''

  for (let i = 0; i < allFileNames.length; i++) {
    const kebabCasedName = allFileNames[i]
    let name: string
    if (kebabCasedName.indexOf('/') > -1) {
      name = upperFirst(camelCase(kebabCasedName.substring(kebabCasedName.lastIndexOf('/') + 1)))
    } else {
      name = upperFirst(camelCase(kebabCasedName))
    }
    imports += `import { ${name} } from '../api/entities/${kebabCasedName}'\n`
    beforeExports += `${name}.schemaName = '${name}'\n`
    exportsArr += `{ name: ${name}.schemaName, schema: ${name}.getSchema() },`
    if (i !== allFileNames.length - 1) {
      exportsArr += `\n  `
    }
  }

  file += imports
  file += '\n'
  file += beforeExports
  file += `
export const mongooseModuleConfig = [
  `
  file += exportsArr
  file += `
]\n`

  writeFileSync(destPath, file)
}

main()
