import { writeFileSync } from 'fs'
import { mkdirpSync } from 'fs-extra'
import { singularize } from 'inflection'
import { kebabCase, upperFirst } from 'lodash'
import { resolve } from 'path'
import * as apiEndpoints from '../lib/constants/api-endpoints'
import { endpointsBlacklist } from './endpoints-blacklist'
import { destExistsOrUserAcceptsMkdirp } from './pre-generate'

async function main(): Promise<void> {
  const baseImports1 = `// THIS FILE IS GENERATED. Do not edit this file.
import { Injectable } from '@nestjs/common'
`
  const baseImports2 = `import { Connection } from 'typeorm'
import { Repository } from '../../shared/data-access/repository'
`

  const whiteListedEndpoints = Object.keys(apiEndpoints)
    .filter((endpointName) => endpointsBlacklist.indexOf(endpointName) === -1)

  for (const endpointName of whiteListedEndpoints) {
      const entityName = upperFirst(singularize(endpointName))
      const entityNameKebab = kebabCase(singularize(endpointName))

      const entityImport =
`import { ${entityName} } from '@qb/common/domains/${entityNameKebab}/${entityNameKebab}'\n`
      const body = `
@Injectable()
export class ${entityName}Repository extends Repository<${entityName}> {
  constructor(
    protected readonly _connection: Connection
  ) {
    super(_connection.getMongoRepository(${entityName}))
  }
}
`
      const pathToDomains = '../../../server/src/domains'

      if (await destExistsOrUserAcceptsMkdirp(pathToDomains)) {
        mkdirpSync(resolve(__dirname, `${pathToDomains}/${entityNameKebab}`))
        writeFileSync(
          resolve(__dirname, `${pathToDomains}/${entityNameKebab}/${entityNameKebab}.repository.generated.ts`),
          baseImports1 + entityImport + baseImports2 + body
        )
      }
    }
}
main()
