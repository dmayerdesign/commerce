import { writeFileSync } from 'fs'
import { mkdirpSync } from 'fs-extra'
import { singularize } from 'inflection'
import { kebabCase, upperFirst } from 'lodash'
import { resolve } from 'path'
import * as apiEndpoints from '../lib/constants/api-endpoints'
import { endpointsBlacklist } from './endpoints-blacklist'

async function main(): Promise<void> {
  const baseImports1 = `// THIS FILE IS GENERATED. Do not edit this file.
import { Injectable } from '@nestjs/common'
import { InjectRepository } from '@nestjs/typeorm'
`
  const baseImports2 = `import { MongoRepository } from 'typeorm'
import { QbRepository } from '../../shared/data-access/repository'
`

  Object.keys(apiEndpoints)
    .filter((endpointName) => endpointsBlacklist.indexOf(endpointName) === -1)
    .forEach((endpointName) => {
      const entityName = upperFirst(singularize(endpointName))
      const entityNameKebab = kebabCase(singularize(endpointName))

      const entityImport =
`import { ${entityName} } from '@qb/common/api/entities/${entityNameKebab}'\n`
      const body = `
@Injectable()
export class ${entityName}Repository extends QbRepository<${entityName}> {
  constructor(
    @InjectRepository(${entityName})
    protected readonly _repository: MongoRepository<${entityName}>,
  ) { super() }
}
`
      const pathToDomains = '../../../server/src/domains'
      mkdirpSync(resolve(__dirname, `${pathToDomains}/${entityNameKebab}`))
      writeFileSync(
        resolve(__dirname, `${pathToDomains}/${entityNameKebab}/${entityNameKebab}.repository.generated.ts`),
        baseImports1 + entityImport + baseImports2 + body
      )
    })
}
main()
