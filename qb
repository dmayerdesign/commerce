#!/usr/bin/env node
const { resolve } = require('path')
const { exec } = require('shelljs')
const { mkdirp, copySync } = require('fs-extra')
const minimist = require('minimist')
const boxen = require('boxen')

main()
function main() {
  const {
    _: [ action, ...modifiers ],
    environment: _environment,
    skipTests,
  } = minimist(process.argv.slice(2), {
    string: [
      'environment',
    ],
    boolean: [
      'skip-tests'
    ],
    alias: {
      'env': 'environment',
      'skipTests': 'skip-tests',
    },
  })
  const environment = _environment || 'development'

  if (action === 'test') {
    const [ stack, modifier ] = modifiers
    test(stack, modifier, skipTests)
  }

  if (action === 'build') {
    const [ stack ] = modifiers
    build(stack, environment, skipTests)
  }

  if (action === 'dev') {
    const [ stack ] = modifiers
    dev(stack, environment)
  }

  if (action === 'nodemon') {
    nodemon()
  }

  if (action === 'start') {
    start(environment)
  }

  if (action === 'help' || !action) {
    help()
  }
}

function test(stack, modifier, skipTests) {
  if (skipTests) {
    return
  }

  if (stack === 'ui') {
    if (modifier) {
      if (modifier === 'unit') {
        exec('./node_modules/jest/bin/jest.js --config ./jest.ui-unit.config.js')
      }
      if (modifier === 'e2e') {
        exec('./node_modules/@angular/cli/bin/ng e2e')
      }
    }
    else {
      test('ui', 'unit', skipTests)
    }
  }

  if (stack === 'server') {
    // TODO: maybe add --watch and --coverage.
    exec('./node_modules/jest/bin/jest.js --config ./server/test/jest-unit.config.js')
  }
}

function generate(fileKey, env) {
  if (fileKey) {
    if (fileKey === 'app-config') {
      exec(`
        if [ -f $QB_PATH_TO_SECRETS/.env ]; then
          source $QB_PATH_TO_SECRETS/.env
        fi
        export ENVIRONMENT=${env}
        ./node_modules/ts-node/dist/bin.js common/src/code-gen/generate-app-config.ts
      `)
    }
    if (fileKey === 'environment-vars') {
      exec(`
        ./node_modules/ts-node/dist/bin.js common/src/code-gen/generate-environment-vars.ts
      `)
    }
    if (fileKey === 'angular-data-services') {
      exec(`
        if [ -f $QB_PATH_TO_SECRETS/.env ]; then
          source $QB_PATH_TO_SECRETS/.env
        fi
        export ENVIRONMENT=${env}
        ./node_modules/ts-node/dist/bin.js common/src/code-gen/generate-angular-data-services.ts
      `)
    }
  }
  else {
    generate('app-config', env)
    generate('environment-vars')
    generate('angular-data-services', env)
  }
}

function prebuild(stack, env, skipTests) {
  if (stack === 'ui') {
    generate('app-config', env)
    generate('angular-data-services', env)
  }
  if (stack === 'server') {
    generate('app-config', env)
    generate('environment-vars', env)
  }

  if (env && env === 'production') {
    test(stack, undefined, skipTests)
  }
}

function build(stack, env, skipTests) {
  prebuild(stack, env, skipTests)

  if (stack) {
    if (stack === 'ui') {
      exec(`./node_modules/@angular/cli/bin/ng build web --configuration=${env} && ./node_modules/@angular/cli/bin/ng run web:ssr:${env}`)
    }
    if (stack === 'server') {
      exec(`./node_modules/@angular/cli/bin/ng run web:ssr:${env}`)
      exec(`./node_modules/typescript/bin/tsc -p server/tsconfig.server.json`)
      mkdirp(resolve(__dirname, './dist/server/server/src/domains/email/emails/templates'))
      copySync(
        './environment.js',
        './dist/environment.js',
      )
      copySync(
        './server/src/domains/email/emails/templates/.',
        './dist/server/server/src/domains/email/emails/templates',
        { recursive: true },
      )
      copySync(
        './server/src/domains/email/emails/partials/.',
        './dist/server/server/src/domains/email/emails/partials',
        { recursive: true },
      )
      copySync(
        './work-files/.',
        './dist/server/work-files',
        { recursive: true },
      )
    }
  }
  else {
    build('ui', env, skipTests)
    build('server', env, skipTests)
  }
}

function dev(stack) {
  const env = 'development'

  if (stack) {
    prebuild(stack, env)
    if (stack === 'ui') {
      exec(`./node_modules/@angular/cli/bin/ng serve --configuration=${env}`)
    }
    if (stack === 'server') {
      exec(`./node_modules/nodemon/bin/nodemon.js --config nodemon.json`)
    }
  }
}

function nodemon() {
  exec(`if [ -f $QB_PATH_TO_SECRETS/.env ]; then source $QB_PATH_TO_SECRETS/.env; fi; export ENVIRONMENT=development; ts-node common/src/code-gen/generate-app-config.ts; ts-node common/src/code-gen/generate-environment-vars.ts; ts-node -r tsconfig-paths/register --project server/tsconfig.server.json server/src/main.ts`)
}

function start(environment) {
  exec(`export ENVIRONMENT=${environment}; node -r ./tsconfig-paths-bootstrap.js ./dist/server/server/src/main.js`)
}

function help() {
  const usage = `Usage of 'qb':

  Develop:        qb dev [ui|server]
  Build:          qb build <ui|server|all> <development|production>
  Test:           qb test ui [unit|e2e]
                  qb test server [unit] [watch|cov]
  Code gen:       qb generate`

  console.log(
    boxen(usage, {
      padding: 1,
      align: 'left',
    })
  )
}


